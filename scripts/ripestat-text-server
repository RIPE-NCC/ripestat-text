#!/usr/bin/env python
"""
Twisted TAC for ripestat-text-server file that can also be executed directly.

Options can be passed to twistd by using -- as a seperator.

For example:

ripestat-text-server -b stat_option -- --pidfile /var/run/custompidfile.pid
"""
import os
import sys
from optparse import OptionParser, make_option
from ripestat.server import StatTextFactory
from twisted.application import service, internet
from twisted.python import usage
from twisted.internet import reactor

from twisted.scripts.twistd import runApp, ServerOptions


PROG_NAME = "ripestat-text-server"
DEFAULT_PID_FILE = "%s.pid" % PROG_NAME
DEFAULT_LOG_FILE = "%s.log" % PROG_NAME

TWISTD_OPTIONS = [
    "-y", __file__,
    "--pidfile", DEFAULT_PID_FILE,
    "--logfile", DEFAULT_LOG_FILE,
]

# If we have root then we have to drop it
if os.geteuid() == 0:
    TWISTD_OPTIONS.extend([
        "-u", "nobody",
        "-g", "nobody",
    ])


class StatTextServerParser(OptionParser):

    standard_option_list = [
        make_option("-p", "--port", default="43"),
        make_option("-b", "--base-url",
            default="https://stat.ripe.net/data/"),
        make_option("-i", "--interface", default="::"),
        make_option("-w", "--watch-file"),
    ]


application = service.Application("RIPEstat Text Server")

# Collect stat params (before --) and twistd params (after --)
stat_params = []
twistd_params = TWISTD_OPTIONS
params = stat_params
for arg in sys.argv[1:]:
    if arg == "--":
        params = twistd_params
    else:
        params.append(arg)

argv_0 = sys.argv[0]
sys.argv[0] = PROG_NAME
options, args = StatTextServerParser().parse_args(stat_params)
sys.argv[0] = argv_0
service = internet.TCPServer(int(options.port), StatTextFactory(
    base_url=options.base_url), interface=options.interface)
service.setServiceParent(application)


_RESTART = False
_PIDFILE = None
_MTIME = None


def check_for_update():
    global _RESTART

    mtime = os.stat(options.watch_file).st_mtime
    if mtime > _MTIME:
        print options.watch_file, "has changed: restarting"
        _RESTART = True
        reactor.stop()
    reactor.callLater(5, check_for_update)


def maybe_restart():
    if _RESTART:
        if _PIDFILE:
            os.unlink(_PIDFILE)
        os.execv(sys.argv[0], sys.argv)


if __name__ == "__main__":
    # Equivalent to running twistd -y PATH/TO/THIS-FILE
    config = ServerOptions()
    try:
        config.parseOptions(twistd_params)
    except usage.error, ue:
        print config
        print "%s: %s" % (sys.argv[0], ue)
    else:
        _PIDFILE = config["pidfile"]
        if options.watch_file:
            _MTIME = os.stat(options.watch_file).st_mtime
            reactor.callLater(5, check_for_update)
            reactor.addSystemEventTrigger("after", "shutdown", maybe_restart)

        ret = runApp(config)
