#!/usr/bin/env python
"""
Twisted TAC for ripestat-text-server file that can also be executed directly.

Options can be passed to twistd by using -- as a seperator.

For example:

ripestat-text-server -b stat_option -- --pidfile /var/run/custompidfile.pid
"""
from optparse import OptionParser, make_option
from ripestat.server import StatTextFactory
import multiprocessing
import os
import signal
import sys

from twisted.application import service, internet
from twisted.python import usage
from twisted.scripts._twistd_unix import daemonize
from twisted.scripts.twistd import runApp, ServerOptions


PROG_NAME = "ripestat-text-server"
DEFAULT_PID_FILE = "%s.pid" % PROG_NAME
DEFAULT_LOG_FILE = "%s.log" % PROG_NAME
WATCH_FREQUENCY = 5  # time in seconds between polling for file changes

TWISTD_OPTIONS = [
    "-y", __file__,
    "--pidfile", DEFAULT_PID_FILE,
    "--logfile", DEFAULT_LOG_FILE,
]


class StatTextServerParser(OptionParser):

    standard_option_list = [
        make_option("-p", "--port", default="43"),
        make_option("-b", "--base-url",
            default="https://stat.ripe.net/data/"),
        make_option("-i", "--interface", default="::"),
        make_option("-w", "--watch-file"),
        make_option("--dont-log", action="append"),
    ]


def parse_params():
    """
    Collect stat params (before --) and twistd params (after --)
    """
    stat_params = []
    twistd_params = TWISTD_OPTIONS

    # If we have root then we have to drop it
    if os.geteuid() == 0:
        twistd_params.extend([
            "-u", "nobody",
            "-g", "nobody",
        ])
    params = stat_params
    for arg in sys.argv[1:]:
        if arg == "--":
            params = twistd_params
        else:
            params.append(arg)
    return stat_params, twistd_params



def setup_twisted_app(options):
    """
    Create a twisted Application for the RIPEstat text server.
    """
    application = service.Application("RIPEstat Text Server")

    tcp_service = internet.TCPServer(int(options.port), StatTextFactory(
        base_url=options.base_url, dont_log=options.dont_log),
        interface=options.interface)
    tcp_service.setServiceParent(application)
    return application


def twistd(params):
    """
    Equivalent to running twistd -y PATH/TO/THIS-FILE
    """
    config = ServerOptions()
    try:
        config.parseOptions(params)
    except usage.error, ue:
        print config
        print "%s: %s" % (sys.argv[0], ue)
    else:
        runApp(config)


def handle_sigterm(pid):
    """
    Ask the child to gracefully shut down when the parent does.
    """
    os.kill(pid, signal.SIGINT)


def watch(target, params, watch_file):
    """
    Run the service, restarting it whenever a given file is modified.
    """
    print "Watching {0} for changes...".format(watch_file)
    if "-n" not in params:
        # Daemonize the watcher unless -n was supplied
        daemonize(None, os)
    params.append("-n")  # We don't want our child to daemonize itself
    while True:
        mtime = os.stat(watch_file).st_mtime

        process = multiprocessing.Process(target=lambda: target(params))
        process.daemon = True
        process.start()
        signal.signal(signal.SIGTERM, lambda a, b: handle_sigterm(process.pid))
        signal.signal(signal.SIGINT, lambda a, b: handle_sigterm(process.pid))

        do_restart = False
        while process.is_alive():
            process.join(WATCH_FREQUENCY)
            if do_restart:
                continue  # we are waiting for the child to die
            cur_mtime = os.stat(watch_file).st_mtime
            if mtime != cur_mtime:
                print watch_file, "has changed: restarting"
                # Send a graceful exit signal
                do_restart = True
                os.kill(process.pid, signal.SIGINT)
        if not do_restart:
            break

_stat_params, _twistd_params = parse_params()
_stat_options, _stat_args = StatTextServerParser().parse_args(_stat_params)
application = setup_twisted_app(_stat_options)

if __name__ == "__main__":
    if _stat_options.watch_file:
        watch(twistd, _twistd_params, _stat_options.watch_file)
    else:
        twistd(_twistd_params)
